---
layout: post
title:  "Sef4J : Simple Event Facade for Java : Library for Performance Monitoring - Events - Metrics Aggregator"
date:   2015-04-10 11:00:00
categories: 
tags: performance monitoring github projects
---


<h1>Sef4j Github Project Information</h1>

<a href="https://github.com/Arnaud-Nauwynck/sef4j">https://github.com/Arnaud-Nauwynck/sef4j</a>

this page: <a href="http://arnaud-nauwynck.github.io/2015/04/10/sef4j.html>http://arnaud-nauwynck.github.io/2015/04/10/sef4j.html</a>


other decriptions (slides to come soon)


Get Source
{% highlight text %}
$ git clone --depth 1 https://github.com/Arnaud-Nauwynck/sef4j.git
$ cd sef4j
$ mvn clean install -DskipTests
{% endhighlight %}


Use it in your project...
using maven pom.xml:
{% highlight xml %}
   <properties>
     <sef4j.version>1.0.0</sef4j.version>
   </properties>
   ...
   <dependency>
     <groupId>org.sef4j</groupId>
     <artifactId>sef4j-callstack</artifactId>
     <version>${sef4j.version}</version>
   </dependency>
{% endhighlight xml %}



See also : source code for documentation.
<br/>
Some important classes contains ascii-art doc comments.
Examples: 
<a href="https://raw.githubusercontent.com/Arnaud-Nauwynck/sef4j/master/sef4j-callstack/src/main/java/org/sef4j/callstack/CallStack.java">CallStack.java</a>, 
<a href="https://raw.githubusercontent.com/Arnaud-Nauwynck/sef4j/master/sef4j-core/src/main/java/org/sef4j/core/api/proptree/PropTreeNode.java">PropTreeNode.java</a>, 
<a href="https://raw.githubusercontent.com/Arnaud-Nauwynck/sef4j/master/sef4j-core/src/main/java/org/sef4j/core/helpers/exporters/fragments/FragmentsProvidersExporter.java">FragmentsProvidersExporter.java</a> ...

As of 2015-04, there is only me as developper... All contributors are welcome!
<br/>
This project is inspired from other past pojects developped and used in production, but this project itself is not currently used in production... only a 'clone' of it.



<h1>Sef4j - Name</h1>

Sef4j stands as initials for "Simple Event Facade for Java".
<br/>

This is not a typo, its name really looks like "Slf4j : Simple Logging Facade for Java"
<br/>

The motto of Sef4j <br/>
<em>Sef4j is to Event Monitoring what Slf4j is to Log : Simple and Efficient</em>
<br/>


It tries to offer a simple API for Events and Monitoring, as simple as slf4j (previously Log4J) is to Log.
<br/>
Maybe "Semf4j" would be a more appropriate name (M for monitoring)?
<br/>

Another project name could have been "Performance Monitoring Facade 4 Java" : perf4j, but the name is already registered.
see https://github.com/perf4j/perf4j
Unfortunatly, the project seems to do very few things compared to mine (maybe a pull request for them?).
<br/>

Sef4j, is a "yet-another" performance monitoring framework, which has now many free/commercial equivalent.
Open source "equivalent framework" would be Dropwizard Metrics (formely Codahale Metrics), JavaMelody, or many other...
Commercial equivalent are ultra impressives (and ultra expensive...).
<p/>


<h1>Sef4j - Goals and Non-Goals</h1>

Sef4j aims to be not only a "Performance" profiler framework, but also an "Event" framework, for plugging Event Handlers as "Appenders" onto simple "Event Logger" from code, so as to produce logging, monitoring, alerts ... to ElasticSearch, InfluxDB, Zooker ... 

<div>
When you want logs in the jvm (not only java), you don't call "System.out.println()" (shame on you if you still do).<br/>
You just add slf4j + logback to your CLASSPATH, put a logback.groovy (xml) file... <br/>
And you know it will "just work fine" without worrying about it. <br/>
If you wan't more appenders, you will have more appenders extensions. 
</div>

<p/>
Now transpose this sentence to Sef4j:
<br/>
<div>
When you want performance and monitoring in the jvm (not only java), you don't call "System.currentTimeMillis()" (shame on you if you still do).<br/>
You just add sef4j to your CLASSPATH, put a sef4j.groovy (xml) file...<br/>
And you know it will "just work fine" without worrying about it.<br/>
If you wan't more performance metrics and monitoring, you will have more extensions.
</div>


Non Goals:

Sef4j is not an even-driven framework for chaining reactive events as an asynchronous programmation model. See Akka instead, or any other projects</br>
Sef4j is not an EventSource framework for doing CQRS programmintg style.</BR>
Sef4j is not a backend store for events, or a middleware. See Apache Kafka, Apache ActiveMQ, ZeroMQ, or any other *-MQ framework for that.</BR>

However, Sef4j will support Appenders for pushing event to these backend systems.



<h1>Difference with DropWizard Metrics : Tree of Statistics Counters</h1>

The big differences with Sef4j compared to Dropwizard Metrics is that Sef4j captures applicative stack traces, not flat traces counters like Metrics.
But it also allows you to manually instrument applicative parameters that make sense in your business code, and use them to categorize differents types of counters for the same stack trace. For example in a financial application, you may want to have several counters for the same pricing method depending of the portfolio used, instruments, thirdparties... because different rules are used to dispatch to different algorithms and data repositories. 
<p/>

Counters may be in-memory tree, that aggregate events with predefined or user-defined listener code. 
<br/>
The framework for instrumenting follows open-close principles! ... If offers you events for push() and pop() for every instrumented methods, you are free to treat these events for aggregating what make sense, and producing counter, histograms, alerts, events, logs... 
<p/>

Here is a typical example showing a tree of statistic counters, compared to flat statistic list as in Dropwizard Metrics.<br/>
Say you have 2 entry points Web services, internally calling several services, and then DAOs jdbc queries.

In Dropwizard Metrics, you would instrument it like that:
{% highlight java %}
public class MyWebService {
   @Timed
   public MyResult myService1(param1, param2...) {
      dao.myQuery1(..)
   }
   @Timed
   public MyResult myService2(param1, param2...) {
      dao.myQuery1(..)
      dao.myQuery2(..)      
   }
}

public class MyDAO {
   @Timed
   public MyResult myQuery1(param1, param2...) {
      jdbc / jpa query...
   }
   @Timed
   public MyResult myQuery2(param1, param2...) {
      jdbc / jpa query...
   }
}
{% endhighlight %}

In DropWizard Metrics, You will get 4 flat metric counters:
{% highlight text %}
MyWebService.myServices1  --> counter stats, ..
MyWebService.myServices2  --> counter stats, ..
MyDAO.myQuery1  --> counter stats, ..
MyDAO.myQuery2  --> counter stats, ..
{% endhighlight %}

How can you known how are linked performance problems in DAO.myQuery1 and MyWebService entrypoint 1/2 ?.. You can't.
<p/>
In Sef4j as in many J2EE profiler tools, you will get a tree of performance counters

{% highlight java %}
public class MyWebService {
   @Sef4j
   public MyResult myService1(param1, param2...) {
      ...
   }
}
{% endhighlight java %}

{% highlight text %}
/
+-- MyWebService.myServices1  --> counter stats, ..
|     |
|     +-- MyDAO.myQuery1  --> counter stats, ..
|     +-- MyDAO.myQuery2  --> counter stats, ..
|
+-- MyWebService.myServices2  --> counter stats, ..
      |
      +-- MyDAO.myQuery1  --> counter stats, ..
      +-- MyDAO.myQuery2  --> counter stats, ..   
{% endhighlight %}




Internally, it calls push and pop events, and dispatch them to thread local handlers in a very efficient way (few nanos of overhead only, no temporary object allocation)... Therefore the name Sef4j.

For free, you can also have logs if you want them, and only on demand on method start/stop or when method is slower than expected:

{% highlight java %}
public class MyWebService {
   @Sef4j(logPush=false, logPop=300) // <= log on pop only, when time > 300 millis
   public MyResult myService1(param1, param2...) {
      ...
   }
}
{% endhighlight java %}


{% highlight text %}
[yyyy/MM/dd HH:mm:ss.sss] MyWebService.myService1() ... took: 500 millis
{% endhighlight text %}


<h2>Statistic Histogram and Pending Metrics Counters</h2> 

By default, you have handlers that increment in-memory statistic counter tree :
{% highlight text %}
/
+-- MyWebService.myServices1  --> Histogram stats + Pending Counters
|     |
|     +-- MyDAO.myQuery1  --> Histogram stats + Pending Counters
|     +-- MyDAO.myQuery2  --> Histogram stats + Pending Counters
|
+-- MyWebService.myServices2  --> Histogram stats + Pending Counters
      |
      +-- MyDAO.myQuery1  --> Histogram stats + Pending Counters
      +-- MyDAO.myQuery2  --> Histogram stats + Pending Counters
{% endhighlight %}


For each counter stats, you have an efficient lock-free data structure that contains:
<ul>
<li>current number of pending threads + sum of pending threads starttime</li>
<li>number of finished executions + sum of execution time, using log-based histogram per time</li>
</ul>

Histograms are hard-coded with 10 buckets, using this logarithmic range: 
<ul>
 <li> bucket[0]: 0           millis</li>
 <li> bucket[1]: 1    - 31   millis</li>
 <li> bucket[2]: 32   - 63   millis</li>
 <li> bucket[3]: 64   - 127  millis</li>
 <li> bucket[4]: 128  - 255  millis</li>
 <li> bucket[5]: 256  - 511  millis</li>
 <li> bucket[6]: 512  - 1023 millis</li>
 <li> bucket[7]: 1024 - 2047 millis</li>
 <li> bucket[8]: 2048 - 4095 millis</li>
 <li> bucket[9]: more than 4096 millis</li>
</ul> 


The finished executions times make sense to display as long-term graph:  refresh every 30 minutes in Graphana + InfluxDB, aggregate per method using all buckets ... It shows the average speed of your method.
When zooming into details, you can have details per method, and find fast or exceptionnaly slow executions.
<p/>

The pending thread information can be used to display the current running activity of you server. It particulary makes sense to display it as pseudo-realtime grapÄ¥: refresh every 30 seconds in Graphana +  InfluxDB, aggregated for all entry-points...
<p/>

You may also raise alarms base on threshold for suspect method not ending fast enough.


Internally, the pending data structure counter is also a very interresting and efficient (lock-free, no memory allocation) data structure!

Here is an explanation 
Suppose you have these chronology:
<ul>
<li>at time t1: Thread1 - enter =>  pendingCount=1, pendingSumStart=t1</li>
<li>at time t2: Thread2 - enter =>  pendingCount=2, pendingSumStart=t1+t2</li>
<li>at time t3: Thread3 - enter =>  pendingCount=3, pendingSumStart=t1+t2+t3</li>
<li>at time t4: Thread1 - leave =>  pendingCount=2, pendingSumStart=t2+t3</li>
<li>at time t5: Thread3 - leave =>  pendingCount=1, pendingSumStart=t2</li>
<li>...</li>
</ul> 

At any time (t), you have the number of threads running a method, and the sum of time already consumed by theses threads.
Example: t between t4 and t5 => you have 2 threads running, then entered in average at time (t2+t3)/2, so then are running in average from "t - (t2+t3)/2" millis. The total time/Cpu already elapsed is "t2+t3 - 2*t" 


<h2>Displaying Statistics Counters Tree Structure as Flat List with Group-By</h2>

If you still want to show a flat list of statistic counters from this rich tree data structure, you can: it is only a matter of grouping and summing per node name.

{% highlight text %}
sum(**/MyDAO.myQuery1) =   
     MyWebService.myServices1/MyDAO.myQuery1
   + MyWebService.myServices2/MyDAO.myQuery1
{% endhighlight %}

A typical usage is to find the worst jdbc queries, independently of where they are called (cf jdbc-logger tool in previous post).



<h1>Instrumented Method - Applicative Stack Trace - Applicative Tree Path</h1>

What I call "Applicative Stack Trace" is the filtering of the real java stack trace when preserving only nodes of interrests : your annotated/instrumented methods, not all this java.lang.*, com.sun.reflect.*, org.springframework.* intermediates nodes you have... 

{% highlight text %}
at myapp.MyDAO
at myapp.MyWebService
{% endhighlight %}

instead of 

{% highlight text %}
at com.oracle.driver...
at org.sef4j ...
at org.hibernate...
at org.springframework...
at java.lang.reflect..
at 
at myapp.MyDAO
at 
at myapp.MyWebService
at ..
at org.springframework
at javax.servlet..
at tomcat..
{% endhighlight %}


With Sef4j, you can instrument method basically by putting a pre()/post() aspect within your method
 
{% highlight java %}
public class MyWebService {

   @Sef4j // <== using whatever AOP framework (Aspectj, ...)
   public MyResult myService1(param1, param2...) {
      ...
   }
   
}
{% endhighlight java %}

If you prefer, you can write the equivalent java code yourself, 
which is exactly 2 lines (+ 1 line for import) for jdk8, 5 lines for jdk < 8:

{% highlight java %}
import org.sef4j.callstack.LocalCallStack;

public class MyWebService {

 /** instrumented code with sef4j, using jdk8 Closeable try-finally */
 public MyResult myService1(param1, param2...) {
   try (StackPopper toPop = LocalCallStack.meth("MyWebService", "myService1").push()) {
      ...
   }
 }
 /** instrumented code with sef4j, using explicit try-finally (jdk<8) */
 public MyResult myService1(param1, param2...) {
   StackPopper toPop = LocalCallStack.meth("MyWebService", "myService1").push();
   try {
      ...
   } finally {
      toPop.close();
   }
 }
}
{% endhighlight java %}


you can enrich your method instrumentation : you have a fluent api to build information on the current method of the current thread, put info in it, then call push().


{% highlight java %}
StackPopper toPop = LocalCallStack.method("MyWebService", "myService1")
        .withParam("param1", param1) // <= add method parameter info
        .withInheritedProp("param2", param2) // <= add inherited property (will be available as ThreadLocal for all child calls)
        .withLog(LOG, false, 300) // <= no log in push(), log in pop() only if time exceed 300 ms
        .withProgressExpectedCount(20) // <= expected 20 progress steps in a loop 
        .push();
        
{% endhighlight %}


Pushed method don't have to be real method, virtual nodes can be introduced to split counters per applicative criteria
{% highlight java %}
public class MyWebService {
   public MyResult myService1(param1, param2...) {
		try(AppCallStack.method("myService").WithParam("param1", param1).push())   // ==> attach inherited property to current Thread
			try (AppCallStack.method("perParam:" + param1)) {
			
				MyDAO.myQuery1()
				..
			} // => finally pop("perParam")
		}// => finally... pop("myService")
   }
}
{% endhighlight %}

You will get a tree of stat counter like


{% highlight text %}
/
+-- MyWebService.myServices1  --> counter stats, ..
|     |
|     +-- perParam1:value1
|     |    +-- MyDAO.myQuery1  --> counter stats, ..
|     |    +-- MyDAO.myQuery2  --> counter stats, ..
|     +-- perParam1:value2
|     |    +-- MyDAO.myQuery1  --> counter stats, ..
|     |    +-- MyDAO.myQuery2  --> counter stats, ..
|     +-- perParam1:value3
|     |    +-- MyDAO.myQuery1  --> counter stats, ..
|     |    +-- MyDAO.myQuery2  --> counter stats, ..
|     ...
{% endhighlight %}



